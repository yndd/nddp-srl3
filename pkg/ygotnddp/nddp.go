/*
Package ygotnddp is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/henderiw/CodeProjects/tmp/ygot/genutil/names.go
using the following YANG input files:
	- /Users/henderiw/CodeProjects/yang/nddp/0_1_0/combined/nddp-system.yang
Imported modules were sourced from:
	- /Users/henderiw/CodeProjects/yang/nddp/0_1_0/combined/...
*/
package ygotnddp

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Cache       *NddpSystem_Cache                  `path:"cache" module:"nddp-system"`
	Gvk         map[string]*NddpSystem_Gvk         `path:"gvk" module:"nddp-system"`
	Transaction map[string]*NddpSystem_Transaction `path:"transaction" module:"nddp-system"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewGvk creates a new entry in the Gvk list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewGvk(Name string) (*NddpSystem_Gvk, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gvk == nil {
		t.Gvk = make(map[string]*NddpSystem_Gvk)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Gvk[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Gvk", key)
	}

	t.Gvk[key] = &NddpSystem_Gvk{
		Name: &Name,
	}

	return t.Gvk[key], nil
}

// GetOrCreateGvk retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateGvk(Name string) *NddpSystem_Gvk {

	key := Name

	if v, ok := t.Gvk[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGvk(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGvk got unexpected error: %v", err))
	}
	return v
}

// GetGvk retrieves the value with the specified key from
// the Gvk map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetGvk(Name string) *NddpSystem_Gvk {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Gvk[key]; ok {
		return lm
	}
	return nil
}

// DeleteGvk deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteGvk(Name string) {
	key := Name

	delete(t.Gvk, key)
}

// AppendGvk appends the supplied NddpSystem_Gvk struct to the
// list Gvk of Device. If the key value(s) specified in
// the supplied NddpSystem_Gvk already exist in the list, an error is
// returned.
func (t *Device) AppendGvk(v *NddpSystem_Gvk) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Gvk == nil {
		t.Gvk = make(map[string]*NddpSystem_Gvk)
	}

	if _, ok := t.Gvk[key]; ok {
		return fmt.Errorf("duplicate key for list Gvk %v", key)
	}

	t.Gvk[key] = v
	return nil
}

// NewTransaction creates a new entry in the Transaction list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewTransaction(Name string) (*NddpSystem_Transaction, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transaction == nil {
		t.Transaction = make(map[string]*NddpSystem_Transaction)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Transaction[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Transaction", key)
	}

	t.Transaction[key] = &NddpSystem_Transaction{
		Name: &Name,
	}

	return t.Transaction[key], nil
}

// GetOrCreateTransaction retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateTransaction(Name string) *NddpSystem_Transaction {

	key := Name

	if v, ok := t.Transaction[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransaction(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransaction got unexpected error: %v", err))
	}
	return v
}

// GetTransaction retrieves the value with the specified key from
// the Transaction map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetTransaction(Name string) *NddpSystem_Transaction {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Transaction[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransaction deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteTransaction(Name string) {
	key := Name

	delete(t.Transaction, key)
}

// AppendTransaction appends the supplied NddpSystem_Transaction struct to the
// list Transaction of Device. If the key value(s) specified in
// the supplied NddpSystem_Transaction already exist in the list, an error is
// returned.
func (t *Device) AppendTransaction(v *NddpSystem_Transaction) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Transaction == nil {
		t.Transaction = make(map[string]*NddpSystem_Transaction)
	}

	if _, ok := t.Transaction[key]; ok {
		return fmt.Errorf("duplicate key for list Transaction %v", key)
	}

	t.Transaction[key] = v
	return nil
}

// GetOrCreateCache retrieves the value of the Cache field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateCache() *NddpSystem_Cache {
	if t.Cache != nil {
		return t.Cache
	}
	t.Cache = &NddpSystem_Cache{}
	return t.Cache
}

// GetCache returns the value of the Cache struct pointer
// from Device. If the receiver or the field Cache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetCache() *NddpSystem_Cache {
	if t != nil && t.Cache != nil {
		return t.Cache
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NddpSystem_Cache represents the /nddp-system/cache YANG schema element.
type NddpSystem_Cache struct {
	Exhausted    *uint32 `path:"exhausted" module:"nddp-system"`
	ExhaustedNbr *uint64 `path:"exhausted-nbr" module:"nddp-system"`
	Update       *bool   `path:"update" module:"nddp-system"`
}

// IsYANGGoStruct ensures that NddpSystem_Cache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddpSystem_Cache) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddpSystem_Cache) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddpSystem_Cache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddpSystem_Cache) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NddpSystem_Gvk represents the /nddp-system/gvk YANG schema element.
type NddpSystem_Gvk struct {
	Action                E_NddpSystem_ResourceAction `path:"action" module:"nddp-system"`
	Data                  *string                     `path:"data" module:"nddp-system"`
	Name                  *string                     `path:"name" module:"nddp-system"`
	RootPath              *string                     `path:"root-path" module:"nddp-system"`
	Status                E_NddpSystem_ResourceStatus `path:"status" module:"nddp-system"`
	Transaction           *string                     `path:"transaction" module:"nddp-system"`
	TransactionGeneration *string                     `path:"transaction-generation" module:"nddp-system"`
}

// IsYANGGoStruct ensures that NddpSystem_Gvk implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddpSystem_Gvk) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the NddpSystem_Gvk struct, which is a YANG list entry.
func (t *NddpSystem_Gvk) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddpSystem_Gvk) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddpSystem_Gvk"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddpSystem_Gvk) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NddpSystem_Transaction represents the /nddp-system/transaction YANG schema element.
type NddpSystem_Transaction struct {
	Action     E_NddpSystem_TransactionAction `path:"action" module:"nddp-system"`
	Generation *string                        `path:"generation" module:"nddp-system"`
	Gvk        []string                       `path:"gvk" module:"nddp-system"`
	Name       *string                        `path:"name" module:"nddp-system"`
	Status     E_NddpSystem_TransactionStatus `path:"status" module:"nddp-system"`
}

// IsYANGGoStruct ensures that NddpSystem_Transaction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddpSystem_Transaction) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the NddpSystem_Transaction struct, which is a YANG list entry.
func (t *NddpSystem_Transaction) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddpSystem_Transaction) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddpSystem_Transaction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddpSystem_Transaction) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// E_NddpSystem_ResourceAction is a derived int64 type which is used to represent
// the enumerated node NddpSystem_ResourceAction. An additional value named
// NddpSystem_ResourceAction_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddpSystem_ResourceAction int64

// IsYANGGoEnum ensures that NddpSystem_ResourceAction implements the yang.GoEnum
// interface. This ensures that NddpSystem_ResourceAction can be identified as a
// mapped type for a YANG enumeration.
func (E_NddpSystem_ResourceAction) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddpSystem_ResourceAction.
func (E_NddpSystem_ResourceAction) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddpSystem_ResourceAction.
func (e E_NddpSystem_ResourceAction) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddpSystem_ResourceAction")
}

const (
	// NddpSystem_ResourceAction_UNSET corresponds to the value UNSET of NddpSystem_ResourceAction
	NddpSystem_ResourceAction_UNSET E_NddpSystem_ResourceAction = 0
	// NddpSystem_ResourceAction_GET corresponds to the value GET of NddpSystem_ResourceAction
	NddpSystem_ResourceAction_GET E_NddpSystem_ResourceAction = 1
	// NddpSystem_ResourceAction_DELETE corresponds to the value DELETE of NddpSystem_ResourceAction
	NddpSystem_ResourceAction_DELETE E_NddpSystem_ResourceAction = 2
	// NddpSystem_ResourceAction_CREATE corresponds to the value CREATE of NddpSystem_ResourceAction
	NddpSystem_ResourceAction_CREATE E_NddpSystem_ResourceAction = 3
	// NddpSystem_ResourceAction_UPDATE corresponds to the value UPDATE of NddpSystem_ResourceAction
	NddpSystem_ResourceAction_UPDATE E_NddpSystem_ResourceAction = 4
	// NddpSystem_ResourceAction_GETRESOURCENAME corresponds to the value GETRESOURCENAME of NddpSystem_ResourceAction
	NddpSystem_ResourceAction_GETRESOURCENAME E_NddpSystem_ResourceAction = 5
	// NddpSystem_ResourceAction_TRANSACTION corresponds to the value TRANSACTION of NddpSystem_ResourceAction
	NddpSystem_ResourceAction_TRANSACTION E_NddpSystem_ResourceAction = 6
)

// E_NddpSystem_ResourceStatus is a derived int64 type which is used to represent
// the enumerated node NddpSystem_ResourceStatus. An additional value named
// NddpSystem_ResourceStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddpSystem_ResourceStatus int64

// IsYANGGoEnum ensures that NddpSystem_ResourceStatus implements the yang.GoEnum
// interface. This ensures that NddpSystem_ResourceStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_NddpSystem_ResourceStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddpSystem_ResourceStatus.
func (E_NddpSystem_ResourceStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddpSystem_ResourceStatus.
func (e E_NddpSystem_ResourceStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddpSystem_ResourceStatus")
}

const (
	// NddpSystem_ResourceStatus_UNSET corresponds to the value UNSET of NddpSystem_ResourceStatus
	NddpSystem_ResourceStatus_UNSET E_NddpSystem_ResourceStatus = 0
	// NddpSystem_ResourceStatus_None corresponds to the value None of NddpSystem_ResourceStatus
	NddpSystem_ResourceStatus_None E_NddpSystem_ResourceStatus = 1
	// NddpSystem_ResourceStatus_SUCCESS corresponds to the value SUCCESS of NddpSystem_ResourceStatus
	NddpSystem_ResourceStatus_SUCCESS E_NddpSystem_ResourceStatus = 2
	// NddpSystem_ResourceStatus_FAILED corresponds to the value FAILED of NddpSystem_ResourceStatus
	NddpSystem_ResourceStatus_FAILED E_NddpSystem_ResourceStatus = 3
	// NddpSystem_ResourceStatus_CREATEPENDING corresponds to the value CREATEPENDING of NddpSystem_ResourceStatus
	NddpSystem_ResourceStatus_CREATEPENDING E_NddpSystem_ResourceStatus = 4
	// NddpSystem_ResourceStatus_DELETEPENDING corresponds to the value DELETEPENDING of NddpSystem_ResourceStatus
	NddpSystem_ResourceStatus_DELETEPENDING E_NddpSystem_ResourceStatus = 5
	// NddpSystem_ResourceStatus_UPDATEPENDING corresponds to the value UPDATEPENDING of NddpSystem_ResourceStatus
	NddpSystem_ResourceStatus_UPDATEPENDING E_NddpSystem_ResourceStatus = 6
	// NddpSystem_ResourceStatus_TRANSACTIONPENDING corresponds to the value TRANSACTIONPENDING of NddpSystem_ResourceStatus
	NddpSystem_ResourceStatus_TRANSACTIONPENDING E_NddpSystem_ResourceStatus = 7
)

// E_NddpSystem_TransactionAction is a derived int64 type which is used to represent
// the enumerated node NddpSystem_TransactionAction. An additional value named
// NddpSystem_TransactionAction_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddpSystem_TransactionAction int64

// IsYANGGoEnum ensures that NddpSystem_TransactionAction implements the yang.GoEnum
// interface. This ensures that NddpSystem_TransactionAction can be identified as a
// mapped type for a YANG enumeration.
func (E_NddpSystem_TransactionAction) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddpSystem_TransactionAction.
func (E_NddpSystem_TransactionAction) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddpSystem_TransactionAction.
func (e E_NddpSystem_TransactionAction) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddpSystem_TransactionAction")
}

const (
	// NddpSystem_TransactionAction_UNSET corresponds to the value UNSET of NddpSystem_TransactionAction
	NddpSystem_TransactionAction_UNSET E_NddpSystem_TransactionAction = 0
	// NddpSystem_TransactionAction_CREATE corresponds to the value CREATE of NddpSystem_TransactionAction
	NddpSystem_TransactionAction_CREATE E_NddpSystem_TransactionAction = 1
	// NddpSystem_TransactionAction_DELETE corresponds to the value DELETE of NddpSystem_TransactionAction
	NddpSystem_TransactionAction_DELETE E_NddpSystem_TransactionAction = 2
)

// E_NddpSystem_TransactionStatus is a derived int64 type which is used to represent
// the enumerated node NddpSystem_TransactionStatus. An additional value named
// NddpSystem_TransactionStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddpSystem_TransactionStatus int64

// IsYANGGoEnum ensures that NddpSystem_TransactionStatus implements the yang.GoEnum
// interface. This ensures that NddpSystem_TransactionStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_NddpSystem_TransactionStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddpSystem_TransactionStatus.
func (E_NddpSystem_TransactionStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddpSystem_TransactionStatus.
func (e E_NddpSystem_TransactionStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddpSystem_TransactionStatus")
}

const (
	// NddpSystem_TransactionStatus_UNSET corresponds to the value UNSET of NddpSystem_TransactionStatus
	NddpSystem_TransactionStatus_UNSET E_NddpSystem_TransactionStatus = 0
	// NddpSystem_TransactionStatus_None corresponds to the value None of NddpSystem_TransactionStatus
	NddpSystem_TransactionStatus_None E_NddpSystem_TransactionStatus = 1
	// NddpSystem_TransactionStatus_SUCCESS corresponds to the value SUCCESS of NddpSystem_TransactionStatus
	NddpSystem_TransactionStatus_SUCCESS E_NddpSystem_TransactionStatus = 2
	// NddpSystem_TransactionStatus_FAILED corresponds to the value FAILED of NddpSystem_TransactionStatus
	NddpSystem_TransactionStatus_FAILED E_NddpSystem_TransactionStatus = 3
	// NddpSystem_TransactionStatus_PENDING corresponds to the value PENDING of NddpSystem_TransactionStatus
	NddpSystem_TransactionStatus_PENDING E_NddpSystem_TransactionStatus = 4
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_NddpSystem_ResourceAction": {
		1: {Name: "GET"},
		2: {Name: "DELETE"},
		3: {Name: "CREATE"},
		4: {Name: "UPDATE"},
		5: {Name: "GETRESOURCENAME"},
		6: {Name: "TRANSACTION"},
	},
	"E_NddpSystem_ResourceStatus": {
		1: {Name: "None"},
		2: {Name: "SUCCESS"},
		3: {Name: "FAILED"},
		4: {Name: "CREATEPENDING"},
		5: {Name: "DELETEPENDING"},
		6: {Name: "UPDATEPENDING"},
		7: {Name: "TRANSACTIONPENDING"},
	},
	"E_NddpSystem_TransactionAction": {
		1: {Name: "CREATE"},
		2: {Name: "DELETE"},
	},
	"E_NddpSystem_TransactionStatus": {
		1: {Name: "None"},
		2: {Name: "SUCCESS"},
		3: {Name: "FAILED"},
		4: {Name: "PENDING"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x5d, 0x6f, 0xda, 0x3c,
		0x14, 0xbe, 0xe7, 0x57, 0x44, 0xbe, 0x06, 0x15, 0xda, 0x14, 0x0a, 0x77, 0x7d, 0xfb, 0xf1, 0x4e,
		0xea, 0xda, 0x4d, 0x6d, 0xb5, 0x9b, 0x69, 0x9a, 0xdc, 0xf8, 0x34, 0x58, 0x05, 0x07, 0xd9, 0x0e,
		0x03, 0x4d, 0xfc, 0xf7, 0x29, 0x1f, 0xa3, 0x09, 0xc4, 0x8e, 0x33, 0xb6, 0xb6, 0x6c, 0xe7, 0xb2,
		0xf6, 0x63, 0x9f, 0xe3, 0x73, 0x9e, 0x3c, 0x3e, 0x3e, 0xa8, 0xdf, 0x5b, 0x9e, 0xe7, 0x79, 0xe4,
		0x86, 0x4e, 0x81, 0x8c, 0x3c, 0xc2, 0x60, 0xce, 0x03, 0x20, 0xed, 0x6c, 0xf4, 0x8a, 0x0b, 0x46,
		0x46, 0x5e, 0x2f, 0xff, 0xf3, 0x2c, 0x12, 0x8f, 0x3c, 0x24, 0x23, 0xaf, 0x9b, 0x0f, 0x9c, 0x73,
		0x49, 0x46, 0x5e, 0xb6, 0x45, 0x3a, 0x10, 0xd0, 0x60, 0x0c, 0xa5, 0xa1, 0xd2, 0xee, 0xd9, 0x74,
		0xbb, 0x3c, 0x59, 0x36, 0xb2, 0x1e, 0xde, 0x34, 0xb6, 0x9e, 0xf8, 0x28, 0xe1, 0x91, 0x2f, 0xb6,
		0x8c, 0x94, 0x0c, 0x09, 0xc6, 0xa2, 0x8e, 0x5a, 0x2a, 0x0d, 0xd3, 0x0d, 0x73, 0x29, 0xec, 0x2e,
		0x8a, 0x65, 0x00, 0x95, 0x5b, 0x64, 0x2e, 0xc1, 0xf2, 0x5b, 0x24, 0x13, 0xaf, 0xc8, 0x2c, 0xb3,
		0xd6, 0xae, 0x06, 0xbe, 0xa3, 0xea, 0x54, 0x86, 0xf1, 0x14, 0x84, 0x26, 0x23, 0x4f, 0xcb, 0x18,
		0x0c, 0xc0, 0x02, 0xaa, 0xe4, 0xdc, 0x16, 0x7a, 0x55, 0x1a, 0x59, 0x6d, 0x9c, 0x7d, 0x33, 0xe0,
		0xeb, 0x09, 0x58, 0x8c, 0x69, 0xac, 0x34, 0x30, 0xf3, 0xa1, 0x7e, 0xc6, 0xe6, 0x19, 0x6a, 0xf0,
		0x35, 0x4f, 0x48, 0xd7, 0x30, 0x6d, 0x4a, 0x8c, 0x4b, 0x82, 0x1a, 0x26, 0xca, 0x35, 0x61, 0x8d,
		0x13, 0xd7, 0x38, 0x81, 0xcd, 0x13, 0x59, 0x9d, 0x50, 0x43, 0x62, 0xd7, 0xdb, 0xdf, 0x2f, 0x67,
		0xe0, 0x16, 0xb9, 0x98, 0x0b, 0x7d, 0x74, 0x68, 0x0b, 0x5a, 0x9e, 0xc7, 0x81, 0x05, 0x72, 0x4b,
		0x45, 0x98, 0xec, 0xf6, 0xd9, 0x7a, 0x68, 0x7b, 0xd0, 0xd3, 0x8d, 0xae, 0xb9, 0xa8, 0xcd, 0xce,
		0x1a, 0xfc, 0x89, 0x4e, 0x62, 0x30, 0x13, 0x68, 0x0b, 0x7f, 0x29, 0x69, 0xa0, 0x79, 0x24, 0xce,
		0x79, 0xc8, 0xb5, 0x6a, 0xb0, 0xf0, 0x06, 0x42, 0xaa, 0xf9, 0x3c, 0xb1, 0xf5, 0x48, 0x27, 0x0a,
		0x6a, 0x57, 0xad, 0xda, 0x0e, 0x47, 0xa5, 0x8b, 0xe6, 0x47, 0xf5, 0x0f, 0x87, 0xfe, 0xb0, 0x3f,
		0x38, 0x1c, 0x1e, 0xbf, 0xbd, 0x33, 0xb7, 0x7e, 0x6d, 0xf6, 0x4b, 0xcb, 0x0d, 0x5f, 0x11, 0xd3,
		0x67, 0x0d, 0xea, 0x88, 0x07, 0xd9, 0x40, 0xb2, 0x52, 0x38, 0xca, 0xd6, 0x9e, 0xcb, 0x56, 0xdf,
		0x77, 0x90, 0xad, 0x13, 0x94, 0xad, 0xd7, 0x97, 0xad, 0xde, 0x89, 0xef, 0xf7, 0x07, 0xbe, 0xdf,
		0x1d, 0x1c, 0x0d, 0xba, 0xc3, 0xe3, 0xe3, 0x5e, 0xbf, 0x87, 0x02, 0x96, 0x38, 0x19, 0xcf, 0x18,
		0xd5, 0x50, 0xaf, 0x5c, 0x39, 0x0e, 0x25, 0x6b, 0x8f, 0x25, 0xeb, 0x21, 0x8a, 0x26, 0x40, 0x85,
		0x83, 0x66, 0xf5, 0x7a, 0xae, 0x94, 0xb2, 0x56, 0xf9, 0xa7, 0x42, 0x44, 0x9a, 0x26, 0x1f, 0x4f,
		0x75, 0xb1, 0xaf, 0x82, 0x31, 0x4c, 0xe9, 0x8c, 0xea, 0x71, 0xe2, 0xde, 0x81, 0x60, 0x6c, 0x96,
		0x07, 0xe7, 0xa0, 0xea, 0x85, 0x95, 0xad, 0xd1, 0x32, 0x0e, 0xb4, 0xc8, 0x8f, 0x74, 0xc3, 0xd8,
		0xec, 0x2e, 0x5d, 0xf1, 0xf5, 0x2c, 0x5d, 0xd1, 0xaa, 0xf6, 0xae, 0xe0, 0x19, 0x09, 0xe7, 0x4f,
		0xe6, 0x97, 0x5d, 0x32, 0x89, 0xef, 0xba, 0xdf, 0xff, 0xae, 0xcb, 0x34, 0xb4, 0x5e, 0x67, 0x72,
		0x1c, 0xea, 0xcc, 0x1e, 0xeb, 0x8c, 0x04, 0x95, 0x06, 0xa5, 0x63, 0x4d, 0x66, 0xe9, 0xdb, 0xf2,
		0x2d, 0x98, 0x0b, 0x11, 0x4f, 0x13, 0xc3, 0xab, 0x1d, 0xae, 0x39, 0x46, 0x35, 0xad, 0x27, 0x5f,
		0x8a, 0x42, 0xea, 0xed, 0x31, 0xf5, 0x94, 0x96, 0x5c, 0x84, 0x2e, 0x8c, 0x3b, 0xd9, 0x81, 0x4d,
		0xf9, 0xed, 0x53, 0xc3, 0xa6, 0x14, 0x85, 0x6c, 0x42, 0x36, 0xd5, 0xb0, 0x49, 0x46, 0x91, 0xee,
		0xe4, 0x45, 0x50, 0x0d, 0xa5, 0x9e, 0xa1, 0xc8, 0x2b, 0xe4, 0x55, 0x0d, 0xaf, 0x94, 0xa6, 0x3a,
		0x56, 0xf5, 0xa4, 0xca, 0x71, 0xc8, 0xa8, 0xbf, 0xa1, 0xe4, 0xb2, 0x26, 0xf3, 0x45, 0x4b, 0x2e,
		0x2d, 0xa9, 0x50, 0xae, 0x65, 0x7f, 0x11, 0x8c, 0x44, 0x44, 0x69, 0x73, 0xe7, 0x56, 0x27, 0x04,
		0x01, 0x92, 0x36, 0xa6, 0x59, 0x71, 0x1d, 0x32, 0x0e, 0x19, 0xe7, 0xdc, 0xe2, 0xb8, 0x82, 0xa5,
		0xa1, 0xba, 0x27, 0xef, 0xb9, 0xd2, 0xa7, 0x5a, 0x1b, 0x5a, 0x20, 0xd7, 0x5c, 0x5c, 0x4c, 0x20,
		0x89, 0x99, 0xa1, 0x8b, 0x4c, 0xae, 0xe9, 0xa2, 0x80, 0x70, 0xeb, 0x59, 0x93, 0x0f, 0x92, 0x81,
		0x04, 0xf6, 0x5f, 0xe2, 0x95, 0x88, 0x27, 0x93, 0x3f, 0xd5, 0x91, 0xdb, 0xee, 0x8c, 0xd9, 0xfb,
		0x71, 0xff, 0xcf, 0x9f, 0x5c, 0xba, 0x71, 0xb6, 0x6b, 0xc2, 0xe1, 0x7a, 0xc0, 0xee, 0x1c, 0x76,
		0xe7, 0x50, 0x2f, 0x9b, 0xe8, 0x65, 0xf1, 0x0e, 0x7c, 0x3b, 0x0d, 0xba, 0x26, 0xb7, 0x38, 0xde,
		0xdc, 0x78, 0x73, 0x37, 0x60, 0x56, 0xc5, 0xcf, 0x3d, 0x0e, 0x3f, 0xfb, 0x20, 0x97, 0xfe, 0x2d,
		0x2e, 0x19, 0x3c, 0xb0, 0x96, 0x74, 0xee, 0xa5, 0xdd, 0x4e, 0x25, 0x9e, 0x5b, 0xa9, 0x87, 0x2d,
		0x6c, 0xfc, 0x2e, 0xb0, 0xd5, 0x88, 0x8c, 0x7a, 0xc9, 0xfa, 0xf1, 0x95, 0xba, 0x8d, 0xf8, 0x3e,
		0xaf, 0x78, 0x9f, 0xdb, 0x5b, 0xa8, 0xe6, 0x77, 0xfa, 0x7d, 0x61, 0x9d, 0xe9, 0xbd, 0xde, 0x2a,
		0xf8, 0x6a, 0xf2, 0x91, 0x70, 0x75, 0x49, 0x9f, 0xe0, 0x36, 0x8a, 0xb6, 0x19, 0xbd, 0xe9, 0x37,
		0x29, 0x4e, 0x95, 0x1c, 0x3b, 0xcf, 0xfe, 0x6f, 0x23, 0x33, 0xd8, 0x5a, 0xfd, 0x00, 0x00, 0x00,
		0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x87, 0xbf, 0x48, 0x76, 0xd6, 0x31, 0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/gvk/action": {
		reflect.TypeOf((E_NddpSystem_ResourceAction)(0)),
	},
	"/gvk/status": {
		reflect.TypeOf((E_NddpSystem_ResourceStatus)(0)),
	},
	"/transaction/action": {
		reflect.TypeOf((E_NddpSystem_TransactionAction)(0)),
	},
	"/transaction/status": {
		reflect.TypeOf((E_NddpSystem_TransactionStatus)(0)),
	},
}
